@page "/services/"
@inject HttpClient _client
@inject IJSRuntime js
@attribute [Authorize]



<h3 class="card-title">Bus services</h3>

<br />
<a href="/services/create" class="btn btn-secondary">
    <span class="oi oi-plus"></span>
    Choose Bus Service
</a>
<br />
<br />

@if (Services == null)
{
    <div class="alert alert-info">Loading Services...</div>
}
else
{
    <table class="table table-responsive">
        <thead>
            <tr>
                <th>Id</th>
                <th>Services</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var service in Services)
            {
                <tr>
                    <td>@service.Id</td>
                    <td>@service.Type</td>
                    <td>
                        <a href="/services/view/@service.Id" class="btn btn-primary">
                            <span class="oi oi-book"></span>
                        </a>
                        <a href="/services/edit/@service.Id" class="btn btn-warning">
                            <span class="oi oi-pencil"></span>
                        </a>
                        <button class="btn btn-danger" @onclick="@(()=>Delete(service.Id))">
                            <span class="oi oi-delete"></span>
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}


@code {
    private List<Service> Services;
    protected async override Task OnInitializedAsync()
    {
        Services = await _client.GetFromJsonAsync<List<Service>>($"{Endpoints.ServicesEndpoint}");
    }
    async Task Delete(int serviceId)
    {
        var service = Services.First(q => q.Id == serviceId);
        var confirm = await js.InvokeAsync<bool>("confirm", $"Do you want to delete {service.Id}?");
        if (confirm)
        {
            await _client.DeleteAsync($"{Endpoints.ServicesEndpoint}/{serviceId}");
            await OnInitializedAsync();
        }
    }
}