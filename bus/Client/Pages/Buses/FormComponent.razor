@inject HttpClient _client

<EditForm Model="@bus" OnValidSubmit="@OnValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <fieldset disabled="@Disabled">
        <div class="form-group">
            <label>Number of Bus needed: </label>
            <div>
                <InputNumber @bind-Value="bus.BusNo" class="form-control" />
                <ValidationMessage For="@(()=> bus.BusNo)" />
            </div>
        </div>
         <div class="form-group">
        <label>Seat: </label>
        <div>
            <InputSelect @bind-Value="bus.SeatId" class="form-control">
               <option value="">-- Select Seat --</option>
                @if (Seats != null)
                {
                    foreach (var seat in Seats)
                    {
                        <option value="@seat.Id">@seat.Seats</option>
                    }
                }
            </InputSelect>
            <ValidationMessage For="@(()=> bus.SeatId)" />
        </div>
    </div>
    </fieldset>
    @if (!Disabled)
    {
        <button type="submit" class=" btn btn-success btn-block">
            @ButtonText
        </button>
    }
    <BackToList Target="buses" />
</EditForm>
@code {
    [Parameter] public bool Disabled { get; set; } = false;
    [Parameter] public Bus bus { get; set; }
    [Parameter] public string ButtonText { get; set; } = "Save";
    [Parameter] public EventCallback OnValidSubmit { get; set; }

    private IList<Seat> Seats;

    protected async override Task OnInitializedAsync()
    {
        Seats = await _client.GetFromJsonAsync<List<Seat>>($"{Endpoints.SeatsEndpoint}");
    }
}