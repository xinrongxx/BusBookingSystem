@page "/feedbacks/create/"
@inject HttpClient _client
@inject NavigationManager _navManager

<h3 class="card-title">Create New Feedback</h3>
<hr />
<br />
<EditForm Model="@feedback" OnValidSubmit="CreateFeedback">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label>Feedback: </label>
        <div>
            <InputText @bind-Value="feedback.Comment" class="form-control" />
            <ValidationMessage For="@(()=> feedback.Comment)" />
        </div>
    </div>

    <div class="form-group">
        <label>Rating: </label>
        <div>
            <InputRadioGroup @bind-Value="feedback.Rating" class="form-control">
                @foreach (var option in ratingOptions)
                {
                    <InputRadio Value="option" /> @option <br />
                }
            </InputRadioGroup>
        </div>
        <br />
        <hr />
        <span id="rating"></span>
    </div>

    <button type="submit" class=" btn btn-success btn-block">
        Create Feedback
    </button>
</EditForm>

@code {
    Feedback feedback = new Feedback();

    private IList<Feedback> Feedbacks;

    List<string> ratingOptions = new List<string> { "1", "2", "3", "4", "5" };

    protected async override Task OnInitializedAsync()
    {
        Feedbacks = await _client.GetFromJsonAsync<List<Feedback>>($"{Endpoints.FeedbacksEndpoint}");
    }

    private async Task CreateFeedback()
    {
        await _client.PostAsJsonAsync(Endpoints.FeedbacksEndpoint, feedback);
        _navManager.NavigateTo("/feedbacks/");
    }
}