@page "/feedbacks/"
@inject HttpClient _client
@inject IJSRuntime js
@attribute [Authorize]


<h3 class="card-title">Car Feedbacks</h3>

<br />
<a href="/feedbacks/create" class="btn btn-secondary">
    <span class="oi oi-plus"></span>
    Create New Feedback
</a>
<br />
<br />

@if (Feedbacks == null)
{
    <div class="alert alert-info">Loading Feedbacks...</div>
}
else
{
    <table class="table table-responsive">
        <thead>
            <tr>
                <th>FeedBack Id</th>
                <th>Rating</th>
                <th>Comments</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var feedback in Feedbacks)
            {
                <tr>
                    <td>@feedback.Id</td>
                    <td>@feedback.Rating</td>
                    <td>@feedback.Comment</td>
                    <td>
                        <a href="/feedbacks/view/@feedback.Id" class="btn btn-primary">
                            <span class="oi oi-book"></span>
                        </a>
                        <a href="/feedbacks/edit/@feedback.Id" class="btn btn-warning">
                            <span class="oi oi-pencil"></span>
                        </a>
                        <button class="btn btn-danger" @onclick="@(()=>Delete(feedback.Id))">
                            <span class="oi oi-delete"></span>
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}


@code {
    private List<Feedback> Feedbacks;
    protected async override Task OnInitializedAsync()
    {
        Feedbacks = await _client.GetFromJsonAsync<List<Feedback>>($"{Endpoints.FeedbacksEndpoint}");
    }
    async Task Delete(int feedbackId)
    {
        var feedback = Feedbacks.First(q => q.Id == feedbackId);
        var confirm = await js.InvokeAsync<bool>("confirm", $"Do you want to delete {feedback.Id}?");
        if (confirm)
        {
            await _client.DeleteAsync($"{Endpoints.FeedbacksEndpoint}/{feedbackId}");
            await OnInitializedAsync();
        }
    }
} 